import requests
from bs4 import BeautifulSoup
import random

def fetch_upcoming_race():
    url = "https://www.formula1.com/en/racing/2025.html"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    race_name = soup.find('h1', class_='race-name').text.strip()
    race_date = soup.find('span', class_='race-date').text.strip()
    return race_name, race_date

def fetch_driver_lineup():
    url = "https://www.formula1.com/en/drivers.html"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    drivers = [driver.text.strip() for driver in soup.find_all('span', class_='driver-name')]
    return drivers

def fetch_race_results(race_name):
    # Adjust the URL to point to the specific race results page
    url = f"https://www.formula1.com/en/results.html/2025/races/{race_name.replace(' ', '_')}.html"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    top_3 = [driver.text.strip() for driver in soup.select('.resultsarchive-table .driver .hide-for-tablet')]
    all_drivers = [driver.text.strip() for driver in soup.select('.resultsarchive-table .driver .hide-for-tablet')]
    return {'top_3': top_3, 'all_drivers': all_drivers}

def input_predictions(player):
    predictions = {}
    predictions['top_3'] = []
    print(f"Enter predictions for {player}:")
    for i in range(3):
        driver = input(f"Enter your prediction for position {i+1}: ")
        predictions['top_3'].append(driver)
    predictions['random_position'] = int(input("Enter your prediction for the random driver's position: "))
    return predictions

def select_random_driver(drivers):
    return random.choice(drivers)

def calculate_points(predictions, actual_results, random_driver):
    points = 0
    for i, driver in enumerate(predictions['top_3']):
        if driver in actual_results['top_3']:
            if actual_results['top_3'].index(driver) == i:
                points += 2
            else:
                points += 1
    if random_driver in actual_results['all_drivers']:
        actual_position = actual_results['all_drivers'].index(random_driver) + 1
        if actual_position == predictions['random_position']:
            points += 2
        else:
            points += 1  # Adjust this logic based on your rules
    return points

def main():
    race_name, race_date = fetch_upcoming_race()
    print(f"Upcoming Race: {race_name} on {race_date}")
    
    drivers = fetch_driver_lineup()
    
    player1_predictions = input_predictions("Player 1")
    player2_predictions = input_predictions("Player 2")
    
    player1_random_driver = select_random_driver(drivers)
    player2_random_driver = select_random_driver(drivers)
    
    print(f"Player 1's random driver: {player1_random_driver}")
    print(f"Player 2's random driver: {player2_random_driver}")
    
    actual_results = fetch_race_results(race_name)
    
    player1_points = calculate_points(player1_predictions, actual_results, player1_random_driver)
    player2_points = calculate_points(player2_predictions, actual_results, player2_random_driver)
    
    print(f"Player 1 points: {player1_points}")
    print(f"Player 2 points: {player2_points}")

if __name__ == "__main__":
    main()
